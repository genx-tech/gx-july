{"version":3,"sources":["filterAsync_.js"],"names":["isPlainObject","filterAsync_","obj","asyncPredicate","Array","isArray","r","l","length","i","el","push","k","Object","prototype","hasOwnProperty","call","Promise","reject"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,YAAf,CAA4BC,GAA5B,EAAiCC,cAAjC,EAAiD;AAC7C,MAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AACpB,QAAII,CAAC,GAAG,EAAR;AACA,QAAIC,CAAC,GAAGL,GAAG,CAACM,MAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AACxB,YAAMC,EAAE,GAAGR,GAAG,CAACO,CAAD,CAAd;;AACA,UAAI,MAAMN,cAAc,CAACO,EAAD,EAAKD,CAAL,EAAQP,GAAR,CAAxB,EAAsC;AAClCI,QAAAA,CAAC,CAACK,IAAF,CAAOD,EAAP;AACH;AACJ;;AAED,WAAOJ,CAAP;AACH,GAXD,MAWO,IAAIN,aAAa,CAACE,GAAD,CAAjB,EAAwB;AAC3B,QAAII,CAAC,GAAG,EAAR;;AACA,SAAK,IAAIM,CAAT,IAAcV,GAAd,EAAmB;AACf,UAAIW,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCd,GAArC,EAA0CU,CAA1C,CAAJ,EAAkD;AAC9C,cAAMF,EAAE,GAAGR,GAAG,CAACU,CAAD,CAAd;;AACA,YAAI,MAAMT,cAAc,CAACO,EAAD,EAAKE,CAAL,EAAQV,GAAR,CAAxB,EAAsC;AAClCI,UAAAA,CAAC,CAACM,CAAD,CAAD,GAAOF,EAAP;AACH;AACJ;AACJ;;AAED,WAAOJ,CAAP;AACH,GAZM,MAYA;AACH,WAAOW,OAAO,CAACC,MAAR,CAAe,mBAAf,CAAP;AACH;AACJ;;AAED,eAAejB,YAAf","sourcesContent":["import isPlainObject from '../object/isPlainObject';\n\n/**\n * Iterates over elements of collection asynchronously, returning an array of all elements predicate returns truthy for.\n * The predicate is invoked asynchronously with three arguments: (value, index|key, collection).\n * @alias collection.filterAsync_\n * @async\n * @param {Array|Object} obj\n * @param {asyncIterator} asyncPredicate\n * @returns {Promise.<Object|undefined>}\n */\nasync function filterAsync_(obj, asyncPredicate) {\n    if (Array.isArray(obj)) {\n        let r = [];\n        let l = obj.length;\n        for (let i = 0; i < l; i++) {\n            const el = obj[i];\n            if (await asyncPredicate(el, i, obj)) {\n                r.push(el);\n            }\n        }\n\n        return r;\n    } else if (isPlainObject(obj)) {\n        let r = {};\n        for (let k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                const el = obj[k];\n                if (await asyncPredicate(el, k, obj)) {\n                    r[k] = el;\n                }\n            }\n        }\n\n        return r;\n    } else {\n        return Promise.reject('Invalid argument!');\n    }\n}\n\nexport default filterAsync_;\n"]}