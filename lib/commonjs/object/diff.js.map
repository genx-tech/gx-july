{"version":3,"sources":["diff.js"],"names":["arrayOperators","array","k","v","push","objectOperators","obj","_diff","base","object","creator","setter","re","vb","tb","to","Array","isArray","avd","_isEqual","length","baseIsEmpty","vd","difference","ops","undefined","_isEmpty"],"mappings":"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","sourcesContent":["import _isEqual from 'lodash/isEqual';\nimport _reduce from 'lodash/reduce';\nimport _isEmpty from 'lodash/isEmpty';\nimport _differenceWith from 'lodash/differenceWith';\n\nimport ifThen from '../lang/ifThen';\n\nconst arrayOperators = [() => [], (array, k, v) => array.push(v)];\nconst objectOperators = [() => ({}), (obj, k, v) => (obj[k] = v)];\n\nfunction _diff(base, object, creator, setter) {\n    return _reduce(\n        object,\n        (re, v, k) => {\n            const vb = base[k];\n            const tb = typeof vb;\n            const to = typeof v;\n\n            if (tb !== to) {\n                // different type at all\n                setter(re, k, v);\n            } else if (typeof vb === 'object') {\n                // both are object\n                if (Array.isArray(vb)) {\n                    // both are array\n                    const avd = _differenceWith(v, vb, _isEqual);\n                    if (avd.length > 0) {\n                        setter(re, k, avd);\n                    }\n                } else if (!_isEqual(vb, v)) {\n                    // object\n                    const baseIsEmpty = _isEmpty(vb);\n\n                    if (_isEmpty(v)) {\n                        if (!baseIsEmpty) {\n                            setter(re, k, v);\n                        }\n                    } else {\n                        if (baseIsEmpty) {\n                            setter(re, k, v);\n                        } else {\n                            // both not empty\n                            const vd = _diff(vb, v, objectOperators[0], objectOperators[1]);\n                            if (!_isEmpty(vd)) {\n                                setter(re, k, vd);\n                            }\n                        }\n                    }\n                }\n            } else if (vb !== v) {\n                setter(re, k, v);\n            }\n\n            return re;\n        },\n        creator()\n    );\n}\n\n/**\n * Deep diff between two object\n * @alias object.difference\n * @param  {Object} base - Object to be compared\n * @param  {Object} object - Object compared\n * @return {Object} Return the key-value pair from object which of the value is different from base with the same key, or undefined if no difference\n */\nfunction difference(base, object) {\n    const ops = Array.isArray(base) ? arrayOperators : objectOperators;\n    const baseIsEmpty = _isEmpty(base);\n    return _isEmpty(object)\n        ? baseIsEmpty\n            ? undefined\n            : object\n        : baseIsEmpty\n        ? object\n        : ifThen(_diff(base, object, ops[0], ops[1]), _isEmpty, undefined);\n}\n\nexport default difference;\n"]}