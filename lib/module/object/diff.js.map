{"version":3,"sources":["diff.js"],"names":["_isEqual","_reduce","_isEmpty","_differenceWith","ifThen","arrayOperators","array","k","v","push","objectOperators","obj","_diff","base","object","creator","setter","re","vb","tb","to","Array","isArray","avd","length","baseIsEmpty","vd","difference","ops","undefined"],"mappings":"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","sourcesContent":["import _isEqual from 'lodash/isEqual';\nimport _reduce from 'lodash/reduce';\nimport _isEmpty from 'lodash/isEmpty';\nimport _differenceWith from 'lodash/differenceWith';\n\nimport ifThen from '../lang/ifThen';\n\nconst arrayOperators = [() => [], (array, k, v) => array.push(v)];\nconst objectOperators = [() => ({}), (obj, k, v) => (obj[k] = v)];\n\nfunction _diff(base, object, creator, setter) {\n    return _reduce(\n        object,\n        (re, v, k) => {\n            const vb = base[k];\n            const tb = typeof vb;\n            const to = typeof v;\n\n            if (tb !== to) {\n                // different type at all\n                setter(re, k, v);\n            } else if (typeof vb === 'object') {\n                // both are object\n                if (Array.isArray(vb)) {\n                    // both are array\n                    const avd = _differenceWith(v, vb, _isEqual);\n                    if (avd.length > 0) {\n                        setter(re, k, avd);\n                    }\n                } else if (!_isEqual(vb, v)) {\n                    // object\n                    const baseIsEmpty = _isEmpty(vb);\n\n                    if (_isEmpty(v)) {\n                        if (!baseIsEmpty) {\n                            setter(re, k, v);\n                        }\n                    } else {\n                        if (baseIsEmpty) {\n                            setter(re, k, v);\n                        } else {\n                            // both not empty\n                            const vd = _diff(vb, v, objectOperators[0], objectOperators[1]);\n                            if (!_isEmpty(vd)) {\n                                setter(re, k, vd);\n                            }\n                        }\n                    }\n                }\n            } else if (vb !== v) {\n                setter(re, k, v);\n            }\n\n            return re;\n        },\n        creator()\n    );\n}\n\n/**\n * Deep diff between two object\n * @alias object.difference\n * @param  {Object} base - Object to be compared\n * @param  {Object} object - Object compared\n * @return {Object} Return the key-value pair from object which of the value is different from base with the same key, or undefined if no difference\n */\nfunction difference(base, object) {\n    const ops = Array.isArray(base) ? arrayOperators : objectOperators;\n    const baseIsEmpty = _isEmpty(base);\n    return _isEmpty(object)\n        ? baseIsEmpty\n            ? undefined\n            : object\n        : baseIsEmpty\n        ? object\n        : ifThen(_diff(base, object, ops[0], ops[1]), _isEmpty, undefined);\n}\n\nexport default difference;\n"]}