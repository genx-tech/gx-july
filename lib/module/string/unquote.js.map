{"version":3,"names":["replaceAll","unquote","str","unescape","quoteSet","length","start","Array","isArray","Set","has","slice"],"sources":["unquote.js"],"sourcesContent":["import replaceAll from './replaceAll';\n\n/**\n * Unquote a string\n * @function string.unquote\n * @param {String} str\n * @param {boolean} [unescape=false] - True to unescape slashed quote, default false\n * @param {Set|Array} [quoteSet] - Set of chars\n * @returns {String}\n */\nfunction unquote(str, unescape, quoteSet) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n\n    if (str.length < 2) {\n        return str;\n    }\n\n    let start = str[0];\n    if (start !== str[str.length - 1]) {\n        return str;\n    }\n\n    if (quoteSet) {\n        if (Array.isArray(quoteSet)) {\n            quoteSet = new Set(quoteSet);\n        }\n\n        if (!quoteSet.has(start)) {\n            return str;\n        }\n    }\n\n    str = str.slice(1, -1);\n\n    if (unescape) {\n        return replaceAll(str, '\\\\' + start, start);\n    }\n\n    return str;\n}\n\nexport default unquote;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACtC,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;IACzB,OAAOA,GAAG;EACd;EAEA,IAAIA,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE;IAChB,OAAOH,GAAG;EACd;EAEA,IAAII,KAAK,GAAGJ,GAAG,CAAC,CAAC,CAAC;EAClB,IAAII,KAAK,KAAKJ,GAAG,CAACA,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE;IAC/B,OAAOH,GAAG;EACd;EAEA,IAAIE,QAAQ,EAAE;IACV,IAAIG,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;MACzBA,QAAQ,GAAG,IAAIK,GAAG,CAACL,QAAQ,CAAC;IAChC;IAEA,IAAI,CAACA,QAAQ,CAACM,GAAG,CAACJ,KAAK,CAAC,EAAE;MACtB,OAAOJ,GAAG;IACd;EACJ;EAEAA,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEtB,IAAIR,QAAQ,EAAE;IACV,OAAOH,UAAU,CAACE,GAAG,EAAE,IAAI,GAAGI,KAAK,EAAEA,KAAK,CAAC;EAC/C;EAEA,OAAOJ,GAAG;AACd;AAEA,eAAeD,OAAO"}