{"version":3,"sources":["findAsync_.js"],"names":["findAsync_","obj","asyncPredicate_","k"],"mappings":";;;;;;;AAAA;;;;AAYA,eAAeA,UAAf,CAA0BC,GAA1B,EAA+BC,eAA/B,EAAgD;AAC5C,QAAMC,CAAC,GAAG,MAAM,4BAAcF,GAAd,EAAmBC,eAAnB,CAAhB;AACA,SAAOD,GAAG,CAACE,CAAD,CAAV;AACH;;eAEcH,U","sourcesContent":["import findKeyAsync_ from './findKeyAsync_';\n\n/**\n * Iterate a collection asynchronously until predicate returns true\n * The returned value is undefined if not found.\n * That's different from the _.find() function in lodash.\n * @alias collection.findAsync_\n * @async\n * @param {Array|Object} obj\n * @param {asyncIterator} asyncPredicate_\n * @returns {Promise.<Object|undefined>}\n */\nasync function findAsync_(obj, asyncPredicate_) {\n    const k = await findKeyAsync_(obj, asyncPredicate_);\n    return obj[k];\n}\n\nexport default findAsync_;\n"]}