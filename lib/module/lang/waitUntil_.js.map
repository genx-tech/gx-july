{"version":3,"sources":["waitUntil_.js"],"names":["sleep_","waitUntil_","checker","checkInterval","maxRounds","result","counter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,UAAf,CAA0BC,OAA1B,EAAyE;AAAA,MAAtCC,aAAsC,uEAAtB,IAAsB;AAAA,MAAhBC,SAAgB,uEAAJ,EAAI;AACrE,MAAIC,MAAM,GAAG,MAAMH,OAAO,EAA1B;AACA,MAAIG,MAAJ,EAAY,OAAOA,MAAP;AAEZ,MAAIC,OAAO,GAAG,CAAd;;AACA,KAAG;AACC,UAAMN,MAAM,CAACG,aAAD,CAAZ;AAEAE,IAAAA,MAAM,GAAG,MAAMH,OAAO,EAAtB;;AAEA,QAAIG,MAAJ,EAAY;AACR;AACH;AACJ,GARD,QAQS,EAAEC,OAAF,GAAYF,SARrB;;AAUA,SAAOC,MAAP;AACH;;AAED,eAAeJ,UAAf","sourcesContent":["import sleep_ from './sleep_';\n\n/**\n * Run the checker every given duration for certain rounds until the checker returns non-false value.\n * @alias lang.waitUntil_\n * @async\n * @param {Function} checker - predicator\n * @param {integer} [checkInterval=1000]\n * @param {integer} [maxRounds=10]\n * @returns {Promise.<boolean>}\n */\nasync function waitUntil_(checker, checkInterval = 1000, maxRounds = 10) {\n    let result = await checker();\n    if (result) return result;\n\n    let counter = 0;\n    do {\n        await sleep_(checkInterval);\n\n        result = await checker();\n\n        if (result) {\n            break;\n        }\n    } while (++counter < maxRounds);\n\n    return result;\n}\n\nexport default waitUntil_;\n"]}