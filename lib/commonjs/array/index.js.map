{"version":3,"sources":["index.js"],"names":["move","array","from","to","copy","copyArrayLike","value","splice","swap","arrayLike","indexA","indexB","a","insert","index","uniqPush","includes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAKO,MAAMA,IAAI,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,EAAd,KAAqB;AACrC,QAAMC,IAAI,GAAGC,aAAa,CAACJ,KAAD,CAA1B;AACA,QAAMK,KAAK,GAAGF,IAAI,CAACF,IAAD,CAAlB;AACAE,EAAAA,IAAI,CAACG,MAAL,CAAYL,IAAZ,EAAkB,CAAlB;AACAE,EAAAA,IAAI,CAACG,MAAL,CAAYJ,EAAZ,EAAgB,CAAhB,EAAmBG,KAAnB;AACA,SAAOF,IAAP;AACH,CANM;;;;AAOA,MAAMI,IAAI,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,MAApB,KAA+B;AAC/C,QAAMP,IAAI,GAAGC,aAAa,CAACI,SAAD,CAA1B;AACA,QAAMG,CAAC,GAAGR,IAAI,CAACM,MAAD,CAAd;AACAN,EAAAA,IAAI,CAACM,MAAD,CAAJ,GAAeN,IAAI,CAACO,MAAD,CAAnB;AACAP,EAAAA,IAAI,CAACO,MAAD,CAAJ,GAAeC,CAAf;AACA,SAAOR,IAAP;AACH,CANM;;;;AAOA,MAAMS,MAAM,GAAG,CAACJ,SAAD,EAAYK,KAAZ,EAAmBR,KAAnB,KAA6B;AAC/C,QAAMF,IAAI,GAAGC,aAAa,CAACI,SAAD,CAA1B;AACAL,EAAAA,IAAI,CAACG,MAAL,CAAYO,KAAZ,EAAmB,CAAnB,EAAsBR,KAAtB;AACA,SAAOF,IAAP;AACH,CAJM;;;;AAKA,MAAMC,aAAa,GAAII,SAAD,IAAe;AACxC,MAAI,CAACA,SAAL,EAAgB;AACZ,WAAO,EAAP;AACH,GAFD,MAEO;AACH,WAAO,CAAC,GAAGA,SAAJ,CAAP;AACH;AACJ,CANM;;;;AAOA,MAAMM,QAAQ,GAAG,CAACN,SAAD,EAAYH,KAAZ,KAAsB;AAC1C,MAAI,CAACG,SAAS,CAACO,QAAV,CAAmBV,KAAnB,CAAL,EAAgC;AAC5B,WAAO,CAAC,GAAGG,SAAJ,EAAeH,KAAf,CAAP;AACH;;AAED,SAAOG,SAAP;AACH,CANM","sourcesContent":["export { default as insertBetween } from './insertBetween';\nexport { default as zipAndFlat } from './zipAndFlat';\nexport { default as arrayToObject } from './arrayToObject';\nexport { default as arrayToCsv } from './arrayToCsv';\n\n/**\n * Some immutable array helpers!\n */\nexport const move = (array, from, to) => {\n    const copy = copyArrayLike(array);\n    const value = copy[from];\n    copy.splice(from, 1);\n    copy.splice(to, 0, value);\n    return copy;\n};\nexport const swap = (arrayLike, indexA, indexB) => {\n    const copy = copyArrayLike(arrayLike);\n    const a = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = a;\n    return copy;\n};\nexport const insert = (arrayLike, index, value) => {\n    const copy = copyArrayLike(arrayLike);\n    copy.splice(index, 0, value);\n    return copy;\n};\nexport const copyArrayLike = (arrayLike) => {\n    if (!arrayLike) {\n        return [];\n    } else {\n        return [...arrayLike];\n    }\n};\nexport const uniqPush = (arrayLike, value) => {\n    if (!arrayLike.includes(value)) {\n        return [...arrayLike, value];\n    }\n\n    return arrayLike;\n};\n"]}