{"version":3,"sources":["waitUntil_.js"],"names":["waitUntil_","checker","checkInterval","maxRounds","result","counter"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;SAC8BA,U;;;;;wEAAf,iBACXC,OADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,YAAAA,aAFW,2DAEK,IAFL;AAGXC,YAAAA,SAHW,2DAGC,EAHD;AAAA;AAAA,mBAKQF,OAAO,EALf;;AAAA;AAKPG,YAAAA,MALO;;AAAA,iBAMPA,MANO;AAAA;AAAA;AAAA;;AAAA,6CAMQA,MANR;;AAAA;AAQPC,YAAAA,OARO,GAQG,CARH;;AAAA;AAAA;AAAA,mBAUD,qBAAOH,aAAP,CAVC;;AAAA;AAAA;AAAA,mBAYQD,OAAO,EAZf;;AAAA;AAYPG,YAAAA,MAZO;;AAAA,iBAcHA,MAdG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAiBF,EAAEC,OAAF,GAAYF,SAjBV;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAmBJC,MAnBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import sleep_ from './sleep_';\n\n/**\n * Run the checker every given duration for certain rounds until the checker returns non-false value.\n * @param {Function} checker - predicator\n * @param {integer} [checkInterval=1000]\n * @param {integer} [maxRounds=10]\n * @returns {Promise.<boolean>}\n */\nexport default async function waitUntil_(\n    checker,\n    checkInterval = 1000,\n    maxRounds = 10\n) {\n    let result = await checker();\n    if (result) return result;\n\n    let counter = 0;\n    do {\n        await sleep_(checkInterval);\n\n        result = await checker();\n\n        if (result) {\n            break;\n        }\n    } while (++counter < maxRounds);\n\n    return result;\n}\n"]}