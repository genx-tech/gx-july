{"version":3,"names":["replaceAll","simpleCsvParser","str","options","delimiter","emptyAsNull","inQuote","start","result","lastWord","hasEscaped","l","length","i","ch","substring","push","trim"],"sources":["simpleCsvParser.js"],"sourcesContent":["import replaceAll from './replaceAll';\n\n/**\n * Parse csv string into array, simple implementation especially for one-line parsing.\n * 23x faster than csv-parse for single line parsing\n * 10x faster than csv-parse/sync for single line parsing\n *\n * split + simpleCsvParser, however split('\\n') is not good for massive data, should use stream reader instead\n * 5x faster than csv-parse/sync for multiple lines parsing\n *\n * @param {string} str\n * @param {object} [options]\n * @property {string} [options.delimiter=',']\n * @property {boolean} [options.emptyAsNull=false]\n * @returns {array}\n */\nconst simpleCsvParser = (str, options) => {\n    const { delimiter, emptyAsNull } = { delimiter: ',', emptyAsNull: false, ...options };\n\n    let inQuote = null;\n    let start = 0;\n    let result = [];\n    let lastWord = null;\n    let hasEscaped = false;\n\n    const l = str.length;\n\n    for (let i = 0; i < l; i++) {\n        const ch = str[i];\n\n        if (inQuote) {\n            if (ch === inQuote) {\n                if (str[i - 1] === '\\\\') {\n                    hasEscaped = true;\n                } else {\n                    // not escaped\n                    lastWord = str.substring(start, i);\n                    if (lastWord && hasEscaped) {\n                        lastWord = replaceAll(lastWord, '\\\\' + inQuote, inQuote);\n                    }\n                    inQuote = null;\n                    hasEscaped = false;\n                }\n            }\n        } else if (ch === delimiter) {\n            if (lastWord == null && i > start) {\n                lastWord = str.substring(start, i);\n            }\n            result.push(lastWord ? lastWord.trim() : emptyAsNull ? null : '');\n            lastWord = null;\n            hasEscaped = false;\n            start = i + 1;\n        } else if (ch === '\"' || ch === \"'\") {\n            if (lastWord == null) {\n                inQuote = ch;\n                start = i + 1;\n            }\n        }\n    }\n\n    if (lastWord == null) {\n        lastWord = str.substring(start);\n    }\n    result.push(lastWord ? lastWord.trim() : emptyAsNull ? null : '');\n\n    return result;\n};\n\nexport default simpleCsvParser;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EACtC,MAAM;IAAEC,SAAS;IAAEC;EAAY,CAAC,GAAG;IAAED,SAAS,EAAE,GAAG;IAAEC,WAAW,EAAE,KAAK;IAAE,GAAGF;EAAQ,CAAC;EAErF,IAAIG,OAAO,GAAG,IAAI;EAClB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,QAAQ,GAAG,IAAI;EACnB,IAAIC,UAAU,GAAG,KAAK;EAEtB,MAAMC,CAAC,GAAGT,GAAG,CAACU,MAAM;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IACxB,MAAMC,EAAE,GAAGZ,GAAG,CAACW,CAAC,CAAC;IAEjB,IAAIP,OAAO,EAAE;MACT,IAAIQ,EAAE,KAAKR,OAAO,EAAE;QAChB,IAAIJ,GAAG,CAACW,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;UACrBH,UAAU,GAAG,IAAI;QACrB,CAAC,MAAM;UACH;UACAD,QAAQ,GAAGP,GAAG,CAACa,SAAS,CAACR,KAAK,EAAEM,CAAC,CAAC;UAClC,IAAIJ,QAAQ,IAAIC,UAAU,EAAE;YACxBD,QAAQ,GAAGT,UAAU,CAACS,QAAQ,EAAE,IAAI,GAAGH,OAAO,EAAEA,OAAO,CAAC;UAC5D;UACAA,OAAO,GAAG,IAAI;UACdI,UAAU,GAAG,KAAK;QACtB;MACJ;IACJ,CAAC,MAAM,IAAII,EAAE,KAAKV,SAAS,EAAE;MACzB,IAAIK,QAAQ,IAAI,IAAI,IAAII,CAAC,GAAGN,KAAK,EAAE;QAC/BE,QAAQ,GAAGP,GAAG,CAACa,SAAS,CAACR,KAAK,EAAEM,CAAC,CAAC;MACtC;MACAL,MAAM,CAACQ,IAAI,CAACP,QAAQ,GAAGA,QAAQ,CAACQ,IAAI,CAAC,CAAC,GAAGZ,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;MACjEI,QAAQ,GAAG,IAAI;MACfC,UAAU,GAAG,KAAK;MAClBH,KAAK,GAAGM,CAAC,GAAG,CAAC;IACjB,CAAC,MAAM,IAAIC,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAE;MACjC,IAAIL,QAAQ,IAAI,IAAI,EAAE;QAClBH,OAAO,GAAGQ,EAAE;QACZP,KAAK,GAAGM,CAAC,GAAG,CAAC;MACjB;IACJ;EACJ;EAEA,IAAIJ,QAAQ,IAAI,IAAI,EAAE;IAClBA,QAAQ,GAAGP,GAAG,CAACa,SAAS,CAACR,KAAK,CAAC;EACnC;EACAC,MAAM,CAACQ,IAAI,CAACP,QAAQ,GAAGA,QAAQ,CAACQ,IAAI,CAAC,CAAC,GAAGZ,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;EAEjE,OAAOG,MAAM;AACjB,CAAC;AAED,eAAeP,eAAe"}