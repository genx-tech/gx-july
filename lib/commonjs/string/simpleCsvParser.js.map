{"version":3,"sources":["simpleCsvParser.js"],"names":["simpleCsvParser","str","options","delimiter","emptyAsNull","inQuote","start","result","lastWord","hasEscaped","l","length","i","ch","substring","push","trim"],"mappings":";;;;;;;AAAA;;;;AAgBA,MAAMA,eAAe,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6B;AAAED,IAAAA,SAAS,EAAE,GAAb;AAAkBC,IAAAA,WAAW,EAAE,KAA/B;AAAsC,OAAGF;AAAzC,GAAnC;AAEA,MAAIG,OAAO,GAAG,IAAd;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;AAEA,QAAMC,CAAC,GAAGT,GAAG,CAACU,MAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AACxB,UAAMC,EAAE,GAAGZ,GAAG,CAACW,CAAD,CAAd;;AAEA,QAAIP,OAAJ,EAAa;AACT,UAAIQ,EAAE,KAAKR,OAAX,EAAoB;AAChB,YAAIJ,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,KAAe,IAAnB,EAAyB;AACrBH,UAAAA,UAAU,GAAG,IAAb;AACH,SAFD,MAEO;AAEHD,UAAAA,QAAQ,GAAGP,GAAG,CAACa,SAAJ,CAAcR,KAAd,EAAqBM,CAArB,CAAX;;AACA,cAAIJ,QAAQ,IAAIC,UAAhB,EAA4B;AACxBD,YAAAA,QAAQ,GAAG,yBAAWA,QAAX,EAAqB,OAAOH,OAA5B,EAAqCA,OAArC,CAAX;AACH;;AACDA,UAAAA,OAAO,GAAG,IAAV;AACAI,UAAAA,UAAU,GAAG,KAAb;AACH;AACJ;AACJ,KAdD,MAcO,IAAII,EAAE,KAAKV,SAAX,EAAsB;AACzB,UAAIK,QAAQ,IAAI,IAAZ,IAAoBI,CAAC,GAAGN,KAA5B,EAAmC;AAC/BE,QAAAA,QAAQ,GAAGP,GAAG,CAACa,SAAJ,CAAcR,KAAd,EAAqBM,CAArB,CAAX;AACH;;AACDL,MAAAA,MAAM,CAACQ,IAAP,CAAYP,QAAQ,GAAGA,QAAQ,CAACQ,IAAT,EAAH,GAAqBZ,WAAW,GAAG,IAAH,GAAU,EAA9D;AACAI,MAAAA,QAAQ,GAAG,IAAX;AACAC,MAAAA,UAAU,GAAG,KAAb;AACAH,MAAAA,KAAK,GAAGM,CAAC,GAAG,CAAZ;AACH,KARM,MAQA,IAAIC,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAzB,EAA8B;AACjC,UAAIL,QAAQ,IAAI,IAAhB,EAAsB;AAClBH,QAAAA,OAAO,GAAGQ,EAAV;AACAP,QAAAA,KAAK,GAAGM,CAAC,GAAG,CAAZ;AACH;AACJ;AACJ;;AAED,MAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AAClBA,IAAAA,QAAQ,GAAGP,GAAG,CAACa,SAAJ,CAAcR,KAAd,CAAX;AACH;;AACDC,EAAAA,MAAM,CAACQ,IAAP,CAAYP,QAAQ,GAAGA,QAAQ,CAACQ,IAAT,EAAH,GAAqBZ,WAAW,GAAG,IAAH,GAAU,EAA9D;AAEA,SAAOG,MAAP;AACH,CAlDD;;eAoDeP,e","sourcesContent":["import replaceAll from './replaceAll';\n\n/**\n * Parse csv string into array, simple implementation especially for one-line parsing.\n * 23x faster than csv-parse for single line parsing\n * 10x faster than csv-parse/sync for single line parsing\n *\n * split + simpleCsvParser, however split('\\n') is not good for massive data, should use stream reader instead\n * 5x faster than csv-parse/sync for multiple lines parsing\n *\n * @param {string} str\n * @param {object} [options]\n * @property {string} [options.delimiter=',']\n * @property {boolean} [options.emptyAsNull=false]\n * @returns {array}\n */\nconst simpleCsvParser = (str, options) => {\n    const { delimiter, emptyAsNull } = { delimiter: ',', emptyAsNull: false, ...options };\n\n    let inQuote = null;\n    let start = 0;\n    let result = [];\n    let lastWord = null;\n    let hasEscaped = false;\n\n    const l = str.length;\n\n    for (let i = 0; i < l; i++) {\n        const ch = str[i];\n\n        if (inQuote) {\n            if (ch === inQuote) {\n                if (str[i - 1] === '\\\\') {\n                    hasEscaped = true;\n                } else {\n                    // not escaped\n                    lastWord = str.substring(start, i);\n                    if (lastWord && hasEscaped) {\n                        lastWord = replaceAll(lastWord, '\\\\' + inQuote, inQuote);\n                    }\n                    inQuote = null;\n                    hasEscaped = false;\n                }\n            }\n        } else if (ch === delimiter) {\n            if (lastWord == null && i > start) {\n                lastWord = str.substring(start, i);\n            }\n            result.push(lastWord ? lastWord.trim() : emptyAsNull ? null : '');\n            lastWord = null;\n            hasEscaped = false;\n            start = i + 1;\n        } else if (ch === '\"' || ch === \"'\") {\n            if (lastWord == null) {\n                inQuote = ch;\n                start = i + 1;\n            }\n        }\n    }\n\n    if (lastWord == null) {\n        lastWord = str.substring(start);\n    }\n    result.push(lastWord ? lastWord.trim() : emptyAsNull ? null : '');\n\n    return result;\n};\n\nexport default simpleCsvParser;\n"]}