{"version":3,"sources":["remap.js"],"names":["remap","object","mapping","keepUnmapped","newObj","Object","entries","map","k","v","nk","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,YAAhC,EAA8C;AAC1C,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC,2BAAUA,OAAV,EAAoBD,MAApB;AAEjC,MAAIG,MAAM,GAAG,EAAb;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,GAAvB,CAA2B,iBAAY;AAAA;AAAA,QAAVC,CAAU;AAAA,QAAPC,CAAO;;AACnC,QAAID,CAAC,IAAIN,OAAT,EAAkB;AACd,UAAIQ,EAAE,GAAGR,OAAO,CAACM,CAAD,CAAhB;;AACA,UAAIG,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAJ,EAAuB;AACnBN,QAAAA,MAAM,CAACM,EAAE,CAAC,CAAD,CAAH,CAAN,mCAAqBN,MAAM,CAACM,EAAE,CAAC,CAAD,CAAH,CAA3B,GAAuCV,KAAK,CAACS,CAAD,EAAIC,EAAE,CAAC,CAAD,CAAN,EAAWP,YAAX,CAA5C;AACH,OAFD,MAEO;AACHC,QAAAA,MAAM,CAACM,EAAD,CAAN,GAAaD,CAAb;AACH;AACJ,KAPD,MAOO;AACH,UAAIN,YAAJ,EAAkB;AACdC,QAAAA,MAAM,CAACI,CAAD,CAAN,GAAYC,CAAZ;AACH;AACJ;AACJ,GAbD;AAeA,SAAOL,MAAP;AACH;;eAEcJ,K","sourcesContent":["/**\n * Remap the keys of object elements in an array, like projection.\n * @param {*} object\n * @param {*} mapping - key to newKey or key to array[ newKey, valueMap ] for next level mapping\n * @param {boolean} keepUnmapped - If true, will keep those not in mapping as its original key, otherwise filter out\n */\nfunction remap(object, mapping, keepUnmapped) {\n    if (typeof mapping === \"string\") return { [mapping]: object };\n\n    let newObj = {};\n    Object.entries(object).map(([k, v]) => {\n        if (k in mapping) {\n            let nk = mapping[k];\n            if (Array.isArray(nk)) {\n                newObj[nk[0]] = { ...newObj[nk[0]], ...remap(v, nk[1], keepUnmapped) };\n            } else {\n                newObj[nk] = v;\n            }\n        } else {\n            if (keepUnmapped) {\n                newObj[k] = v;\n            }\n        }\n    });\n\n    return newObj;\n}\n\nexport default remap;\n"]}