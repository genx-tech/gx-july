{"version":3,"sources":["isInteger.js"],"names":["regexInt","regexPos","regexIndex","regexNeg","regexNonZero","RANGE_POSITIVE","RANGE_NEGATIVE","RANGE_INDEX","RANGE_NON_ZERO","mapRegex","isInteger","value","options","range","type","Number","trim","regex","test"],"mappings":";;;;;;AAAA,MAAMA,QAAQ,GAAG,cAAjB;AACA,MAAMC,QAAQ,GAAG,eAAjB;AACA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,QAAQ,GAAG,aAAjB;AACA,MAAMC,YAAY,GAAG,mBAArB;AAEO,MAAMC,cAAc,GAAG,UAAvB;;AACA,MAAMC,cAAc,GAAG,UAAvB;;AACA,MAAMC,WAAW,GAAG,OAApB;;AACA,MAAMC,cAAc,GAAG,SAAvB;;AAEP,MAAMC,QAAQ,GAAG;AACb,GAACJ,cAAD,GAAkBJ,QADL;AAEb,GAACM,WAAD,GAAeL,UAFF;AAGb,GAACI,cAAD,GAAkBH,QAHL;AAIb,GAACK,cAAD,GAAkBJ;AAJL,CAAjB;;AAYA,MAAMM,SAAS,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAClCA,EAAAA,OAAO,GAAG;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgB,OAAGD;AAAnB,GAAV;AACA,QAAME,IAAI,GAAG,OAAOH,KAApB;;AAEA,MAAIG,IAAI,KAAK,QAAb,EAAuB;AACnB,WAAOC,MAAM,CAACL,SAAP,CAAiBC,KAAjB,CAAP;AACH,GAFD,MAEO,IAAIG,IAAI,KAAK,QAAb,EAAuB;AAC1BH,IAAAA,KAAK,GAAGA,KAAK,CAACK,IAAN,EAAR;AAEA,UAAMC,KAAK,GAAGR,QAAQ,CAACG,OAAO,CAACC,KAAT,CAAR,IAA2Bb,QAAzC;;AACA,QAAIiB,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAJ,EAAuB;AACnB,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CAhBD;;eAkBeD,S","sourcesContent":["const regexInt = /^(\\+|-)?\\d+$/;\nconst regexPos = /^\\+?[1-9]\\d*$/;\nconst regexIndex = /^0$|^([1-9]\\d*)$/;\nconst regexNeg = /^-[1-9]\\d*$/;\nconst regexNonZero = /^(\\+|-)?[1-9]\\d*$/;\n\nexport const RANGE_POSITIVE = 'positive';\nexport const RANGE_NEGATIVE = 'negative';\nexport const RANGE_INDEX = 'index';\nexport const RANGE_NON_ZERO = 'nonZero';\n\nconst mapRegex = {\n    [RANGE_POSITIVE]: regexPos,\n    [RANGE_INDEX]: regexIndex,\n    [RANGE_NEGATIVE]: regexNeg,\n    [RANGE_NON_ZERO]: regexNonZero,\n};\n\n/**\n * Check a number or string whether it is exactly an integer\n * @param {*} value\n * @returns {boolean}\n */\nconst isInteger = (value, options) => {\n    options = { range: 'all', ...options };\n    const type = typeof value;\n\n    if (type === 'number') {\n        return Number.isInteger(value);\n    } else if (type === 'string') {\n        value = value.trim();\n\n        const regex = mapRegex[options.range] || regexInt;\n        if (regex.test(value)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport default isInteger;\n"]}