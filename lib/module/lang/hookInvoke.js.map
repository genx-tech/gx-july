{"version":3,"sources":["hookInvoke.js"],"names":["hookInvoke","obj","onCalling","onCalled","Proxy","get","target","propKey","origMethod","args","Promise","resolve","name","returned","apply","then","catch"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB;AAAA,SACf,IAAIC,KAAJ,CAAUH,GAAV,EAAe;AACXI,IAAAA,GADW,eACPC,MADO,EACCC;AAAQ;AADT,MACyB;AAChC,UAAMC,UAAU,GAAGF,MAAM,CAACC,OAAD,CAAzB;;AACA,UAAI,OAAOC,UAAP,KAAsB,UAA1B,EAAsC;AAClC,eAAO,YAAmB;AAAA,4CAANC,IAAM;AAANA,YAAAA,IAAM;AAAA;;AACtBP,UAAAA,SAAS,IACLQ,OAAO,CAACC,OAAR,CACIT,SAAS,CAACD,GAAD,EAAM;AAAEW,YAAAA,IAAI,EAAEL,OAAR;AAAiBE,YAAAA,IAAI,EAAJA;AAAjB,WAAN,CADb,CADJ;AAIA,cAAII,QAAQ,GAAGL,UAAU,CAACM,KAAX,CAAiBR,MAAjB,EAAyBG,IAAzB,CAAf;AACAN,UAAAA,QAAQ,IACJO,OAAO,CAACC,OAAR,CAAgBE,QAAhB,EACKE,IADL,CACU,UAACF,QAAD;AAAA,mBACFH,OAAO,CAACC,OAAR,CACIR,QAAQ,CAACF,GAAD,EAAM;AAAEW,cAAAA,IAAI,EAAEL,OAAR;AAAiBM,cAAAA,QAAQ,EAARA;AAAjB,aAAN,CADZ,CADE;AAAA,WADV,EAMKG,KANL,EADJ;AAQA,iBAAOH,QAAP;AACH,SAfD;AAgBH;;AAED,aAAOL,UAAP;AACH;AAvBU,GAAf,CADe;AAAA,CAAnB;;eA2BeR,U","sourcesContent":["/**\n * Add hooks before an object's method is being called and after.\n * @param {*} obj\n * @param {*} onCalling - Before hook\n * @param {*} onCalled - After hook\n * @returns\n */\nconst hookInvoke = (obj, onCalling, onCalled) =>\n    new Proxy(obj, {\n        get(target, propKey /*, receiver*/) {\n            const origMethod = target[propKey];\n            if (typeof origMethod === 'function') {\n                return function (...args) {\n                    onCalling &&\n                        Promise.resolve(\n                            onCalling(obj, { name: propKey, args })\n                        );\n                    let returned = origMethod.apply(target, args);\n                    onCalled &&\n                        Promise.resolve(returned)\n                            .then((returned) =>\n                                Promise.resolve(\n                                    onCalled(obj, { name: propKey, returned })\n                                )\n                            )\n                            .catch();\n                    return returned;\n                };\n            }\n\n            return origMethod;\n        },\n    });\n\nexport default hookInvoke;\n"]}