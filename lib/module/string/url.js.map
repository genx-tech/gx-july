{"version":3,"sources":["url.js"],"names":["join","base","extraPath","appendQuery","url","query","posQM","indexOf","objectToQueryString","qs","split","previousObj","queryStringToObject","newObj","newQs","substr","parts","reduce","r","pair","k","v","decodeURIComponent","obj","part","encodeURIComponent","push"],"mappings":";;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,IAAT,CAAcC,IAAd,EAAoBC,SAApB,EAA+B;AAClC,SAAOD,IAAI,GACLC,SAAS,GACL,0BAAeD,IAAf,EAAqB,GAArB,IAA4B,4BAAiBC,SAAjB,EAA4B,GAA5B,CADvB,GAELD,IAHC,GAILC,SAJN;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACpC,MAAI,CAACA,KAAL,EAAY,OAAOD,GAAP;AAEZ,QAAME,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAY,GAAZ,CAAd;;AAEA,MAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,MAAAA,KAAK,GAAGG,mBAAmB,CAACH,KAAD,CAA3B;AACH;;AAED,WAAOA,KAAK,GAAGD,GAAG,GAAG,GAAN,GAAYC,KAAf,GAAuBD,GAAnC;AACH;;AAED,QAAM,CAACH,IAAD,EAAOQ,EAAP,IAAaL,GAAG,CAACM,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAnB;AACA,QAAMC,WAAW,GAAGC,mBAAmB,CAACH,EAAD,CAAvC;AACA,QAAMI,MAAM,GACR,OAAOR,KAAP,KAAiB,QAAjB,GAA4BO,mBAAmB,CAACP,KAAD,CAA/C,GAAyDA,KAD7D;AAGA,QAAMS,KAAK,GAAGN,mBAAmB,CAAC,EAAE,GAAGG,WAAL;AAAkB,OAAGE;AAArB,GAAD,CAAjC;AAEA,SAAOC,KAAK,GAAGb,IAAI,GAAG,GAAP,GAAaa,KAAhB,GAAwBV,GAApC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASQ,mBAAT,CAA6BH,EAA7B,EAAiC;AACpC,MAAI,CAACA,EAAL,EAAS;AACL,WAAO,EAAP;AACH;;AACD,QAAMJ,KAAK,GAAGI,EAAE,CAAC,CAAD,CAAF,KAAU,GAAV,GAAgBA,EAAE,CAACM,MAAH,CAAU,CAAV,CAAhB,GAA+BN,EAA7C;AACA,QAAMO,KAAK,GAAGX,KAAK,CAACK,KAAN,CAAY,GAAZ,CAAd;AAEA,SAAOM,KAAK,CAACC,MAAN,CAAa,CAACC,CAAD,EAAIC,IAAJ,KAAa;AAC7B,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,IAAI,CAACT,KAAL,CAAW,GAAX,CAAf;AACAQ,IAAAA,CAAC,CAACI,kBAAkB,CAACF,CAAD,CAAnB,CAAD,GAA2BC,CAAC,IAAI,IAAL,GAAY,IAAZ,GAAmBC,kBAAkB,CAACD,CAAD,CAAhE;AACA,WAAOH,CAAP;AACH,GAJM,EAIJ,EAJI,CAAP;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASV,mBAAT,CAA6Be,GAA7B,EAAkC;AACrC,MAAIP,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAII,CAAT,IAAcG,GAAd,EAAmB;AACf,UAAMF,CAAC,GAAGE,GAAG,CAACH,CAAD,CAAb;AACA,UAAMI,IAAI,GACNH,CAAC,IAAI,IAAL,GACMI,kBAAkB,CAACL,CAAD,CADxB,GAEO,GAAEK,kBAAkB,CAACL,CAAD,CAAI,IAAGK,kBAAkB,CAACJ,CAAD,CAAI,EAH5D;AAIAL,IAAAA,KAAK,CAACU,IAAN,CAAWF,IAAX;AACH;;AAED,SAAOR,KAAK,CAAChB,IAAN,CAAW,GAAX,CAAP;AACH","sourcesContent":["import { dropIfEndsWith, ensureStartsWith } from './text';\n\n/**\n * Join base url and the extra url path.\n * @function module:url.join\n * @param {string} base\n * @param {string} extraPath\n * @returns {string}\n */\nexport function join(base, extraPath) {\n    return base\n        ? extraPath\n            ? dropIfEndsWith(base, '/') + ensureStartsWith(extraPath, '/')\n            : base\n        : extraPath;\n}\n\n/**\n * Merge the query parameters into given url.\n * @function module:url.appendQuery\n * @param {string} url - Original url.\n * @param {object} query - Key-value pairs query object to be merged into the url.\n * @returns {string}\n */\nexport function appendQuery(url, query) {\n    if (!query) return url;\n\n    const posQM = url.indexOf('?');\n\n    if (posQM === -1) {\n        if (typeof query !== 'string') {\n            query = objectToQueryString(query);\n        }\n\n        return query ? url + '?' + query : url;\n    }\n\n    const [base, qs] = url.split('?', 2);\n    const previousObj = queryStringToObject(qs);\n    const newObj =\n        typeof query === 'string' ? queryStringToObject(query) : query;\n\n    const newQs = objectToQueryString({ ...previousObj, ...newObj });\n\n    return newQs ? base + '?' + newQs : url;\n}\n\n/**\n * Parse query string into key-value pairs.\n * @function module:url.queryStringToObject\n * @param {string} qs\n * @returns {object}\n */\nexport function queryStringToObject(qs) {\n    if (!qs) {\n        return {};\n    }\n    const query = qs[0] === '?' ? qs.substr(1) : qs;\n    const parts = query.split('&');\n\n    return parts.reduce((r, pair) => {\n        const [k, v] = pair.split('=');\n        r[decodeURIComponent(k)] = v == null ? null : decodeURIComponent(v);\n        return r;\n    }, {});\n}\n\n/**\n * Stringify an object into url query string.\n * @function module:url.objectToQueryString\n * @param {*} obj\n * @returns {string}\n */\nexport function objectToQueryString(obj) {\n    let parts = [];\n\n    for (let k in obj) {\n        const v = obj[k];\n        const part =\n            v == null\n                ? encodeURIComponent(k)\n                : `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n        parts.push(part);\n    }\n\n    return parts.join('&');\n}\n"]}