{"version":3,"sources":["batchAsync_.js"],"names":["isPlainObject","batchAsync_","obj","iterator","Array","isArray","r","l","length","i","push","Promise","all","keys","values","k","Object","prototype","hasOwnProperty","call","result","reduce","reject"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,WAAf,CAA2BC,GAA3B,EAAgCC,QAAhC,EAA0C;AACtC,MAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AACpB,UAAMI,CAAC,GAAG,EAAV;AAEA,QAAIC,CAAC,GAAGL,GAAG,CAACM,MAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AACxBH,MAAAA,CAAC,CAACI,IAAF,CAAOP,QAAQ,CAACD,GAAG,CAACO,CAAD,CAAJ,EAASA,CAAT,EAAYP,GAAZ,CAAf;AACH;;AAED,WAAOS,OAAO,CAACC,GAAR,CAAYN,CAAZ,CAAP;AACH;;AAED,MAAIN,aAAa,CAACE,GAAD,CAAjB,EAAwB;AACpB,UAAMW,IAAI,GAAG,EAAb;AACA,UAAMC,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAT,IAAcb,GAAd,EAAmB;AACf,UAAIc,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCjB,GAArC,EAA0Ca,CAA1C,CAAJ,EAAkD;AAC9CF,QAAAA,IAAI,CAACH,IAAL,CAAUK,CAAV;AACAD,QAAAA,MAAM,CAACJ,IAAP,CAAYP,QAAQ,CAACD,GAAG,CAACa,CAAD,CAAJ,EAASA,CAAT,EAAYb,GAAZ,CAApB;AACH;AACJ;;AAED,UAAMkB,MAAM,GAAG,MAAMT,OAAO,CAACC,GAAR,CAAYE,MAAZ,CAArB;AACA,WAAOD,IAAI,CAACQ,MAAL,CAAY,CAACf,CAAD,EAAIS,CAAJ,EAAON,CAAP,KAAa;AAC5BH,MAAAA,CAAC,CAACS,CAAD,CAAD,GAAOK,MAAM,CAACX,CAAD,CAAb;AACA,aAAOH,CAAP;AACH,KAHM,EAGJ,EAHI,CAAP;AAIH;;AAED,SAAOK,OAAO,CAACW,MAAR,CAAe,mBAAf,CAAP;AACH;;AAED,eAAerB,WAAf","sourcesContent":["import isPlainObject from '../object/isPlainObject';\n\n/**\n * Walk through each entry of an array of an object parallelly, faster than eachAsync_\n * @alias collection.batchAsync_\n * @async\n * @param {Array|Object} obj\n * @param {asyncIterator} iterator\n * @returns {Promise.<Array|Object>}\n */\nasync function batchAsync_(obj, iterator) {\n    if (Array.isArray(obj)) {\n        const r = [];\n\n        let l = obj.length;\n        for (let i = 0; i < l; i++) {\n            r.push(iterator(obj[i], i, obj));\n        }\n\n        return Promise.all(r);\n    } \n    \n    if (isPlainObject(obj)) {\n        const keys = [];\n        const values = [];\n\n        for (let k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n                values.push(iterator(obj[k], k, obj));\n            }\n        }\n\n        const result = await Promise.all(values);\n        return keys.reduce((r, k, i) => {\n            r[k] = result[i];\n            return r;\n        }, {});\n    } \n\n    return Promise.reject('Invalid argument!');\n}\n\nexport default batchAsync_;\n"]}