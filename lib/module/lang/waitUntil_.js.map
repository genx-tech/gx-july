{"version":3,"sources":["waitUntil_.js"],"names":["waitUntil_","checker","checkInterval","maxRounds","result","counter"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SACeA,U;;;;;wEAAf,iBACIC,OADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,YAAAA,aAFJ,2DAEoB,IAFpB;AAGIC,YAAAA,SAHJ,2DAGgB,EAHhB;AAAA;AAAA,mBAKuBF,OAAO,EAL9B;;AAAA;AAKQG,YAAAA,MALR;;AAAA,iBAMQA,MANR;AAAA;AAAA;AAAA;;AAAA,6CAMuBA,MANvB;;AAAA;AAQQC,YAAAA,OARR,GAQkB,CARlB;;AAAA;AAAA;AAAA,mBAUc,qBAAOH,aAAP,CAVd;;AAAA;AAAA;AAAA,mBAYuBD,OAAO,EAZ9B;;AAAA;AAYQG,YAAAA,MAZR;;AAAA,iBAcYA,MAdZ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAiBa,EAAEC,OAAF,GAAYF,SAjBzB;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAmBWC,MAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eAsBeJ,U","sourcesContent":["import sleep_ from './sleep_';\n\n/**\n * Run the checker every given duration for certain rounds until the checker returns non-false value.\n * @alias lang.waitUntil_\n * @param {Function} checker - predicator\n * @param {integer} [checkInterval=1000]\n * @param {integer} [maxRounds=10]\n * @returns {Promise.<boolean>}\n */\nasync function waitUntil_(\n    checker,\n    checkInterval = 1000,\n    maxRounds = 10\n) {\n    let result = await checker();\n    if (result) return result;\n\n    let counter = 0;\n    do {\n        await sleep_(checkInterval);\n\n        result = await checker();\n\n        if (result) {\n            break;\n        }\n    } while (++counter < maxRounds);\n\n    return result;\n}\n\nexport default waitUntil_;"]}