{"version":3,"names":["_clone","isInteger","RANGE_INDEX","addEntry","cowSet","collection","keyPath","value","options","numberAsArrayIndex","keyPathSeparator","nodes","Array","isArray","concat","split","length","lastIndex","index","nested","key","next","nextKey","range","lastKey"],"sources":["cowSet.js"],"sourcesContent":["import _clone from 'lodash/clone';\nimport isInteger, { RANGE_INDEX } from '../validators/isInteger';\n\nimport { addEntry } from './set';\n\n// copy on write set\nfunction cowSet(collection, keyPath, value, options) {\n    options = { numberAsArrayIndex: true, keyPathSeparator: '.', ...options };\n\n    if (collection == null || typeof collection !== 'object') {\n        return collection;\n    }\n\n    if (keyPath == null) {\n        return collection;\n    }\n\n    let nodes = Array.isArray(keyPath) ? keyPath.concat() : keyPath.split(options.keyPathSeparator);\n    const length = nodes.length;\n\n    if (length > 0) {\n        const lastIndex = length - 1;\n\n        let index = 0;\n        let nested = _clone(collection);\n        collection = nested;\n\n        while (nested != null && index < lastIndex) {\n            const key = nodes[index++];\n\n            let next = nested[key];\n            if (next == null || typeof next !== 'object') {\n                // peek next node, see if it is integer\n                const nextKey = nodes[index];\n\n                if (options.numberAsArrayIndex && isInteger(nextKey, { range: RANGE_INDEX })) {\n                    next = addEntry(nested, key, [], options.numberAsArrayIndex);\n                } else {\n                    next = addEntry(nested, key, {}, options.numberAsArrayIndex);\n                }\n\n                nested = next;\n            } else {\n                nested[key] = _clone(next);\n                nested = nested[key];\n            }\n        }\n\n        const lastKey = nodes[lastIndex];\n        addEntry(nested, lastKey, value, options.numberAsArrayIndex);\n    }\n\n    return collection;\n}\n\nexport default cowSet;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,IAAIC,WAAW,QAAQ,yBAAyB;AAEhE,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;AACA,SAASC,MAAMA,CAACC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACjDA,OAAO,GAAG;IAAEC,kBAAkB,EAAE,IAAI;IAAEC,gBAAgB,EAAE,GAAG;IAAE,GAAGF;EAAQ,CAAC;EAEzE,IAAIH,UAAU,IAAI,IAAI,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IACtD,OAAOA,UAAU;EACrB;EAEA,IAAIC,OAAO,IAAI,IAAI,EAAE;IACjB,OAAOD,UAAU;EACrB;EAEA,IAAIM,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACP,OAAO,CAAC,GAAGA,OAAO,CAACQ,MAAM,CAAC,CAAC,GAAGR,OAAO,CAACS,KAAK,CAACP,OAAO,CAACE,gBAAgB,CAAC;EAC/F,MAAMM,MAAM,GAAGL,KAAK,CAACK,MAAM;EAE3B,IAAIA,MAAM,GAAG,CAAC,EAAE;IACZ,MAAMC,SAAS,GAAGD,MAAM,GAAG,CAAC;IAE5B,IAAIE,KAAK,GAAG,CAAC;IACb,IAAIC,MAAM,GAAGnB,MAAM,CAACK,UAAU,CAAC;IAC/BA,UAAU,GAAGc,MAAM;IAEnB,OAAOA,MAAM,IAAI,IAAI,IAAID,KAAK,GAAGD,SAAS,EAAE;MACxC,MAAMG,GAAG,GAAGT,KAAK,CAACO,KAAK,EAAE,CAAC;MAE1B,IAAIG,IAAI,GAAGF,MAAM,CAACC,GAAG,CAAC;MACtB,IAAIC,IAAI,IAAI,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC1C;QACA,MAAMC,OAAO,GAAGX,KAAK,CAACO,KAAK,CAAC;QAE5B,IAAIV,OAAO,CAACC,kBAAkB,IAAIR,SAAS,CAACqB,OAAO,EAAE;UAAEC,KAAK,EAAErB;QAAY,CAAC,CAAC,EAAE;UAC1EmB,IAAI,GAAGlB,QAAQ,CAACgB,MAAM,EAAEC,GAAG,EAAE,EAAE,EAAEZ,OAAO,CAACC,kBAAkB,CAAC;QAChE,CAAC,MAAM;UACHY,IAAI,GAAGlB,QAAQ,CAACgB,MAAM,EAAEC,GAAG,EAAE,CAAC,CAAC,EAAEZ,OAAO,CAACC,kBAAkB,CAAC;QAChE;QAEAU,MAAM,GAAGE,IAAI;MACjB,CAAC,MAAM;QACHF,MAAM,CAACC,GAAG,CAAC,GAAGpB,MAAM,CAACqB,IAAI,CAAC;QAC1BF,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC;MACxB;IACJ;IAEA,MAAMI,OAAO,GAAGb,KAAK,CAACM,SAAS,CAAC;IAChCd,QAAQ,CAACgB,MAAM,EAAEK,OAAO,EAAEjB,KAAK,EAAEC,OAAO,CAACC,kBAAkB,CAAC;EAChE;EAEA,OAAOJ,UAAU;AACrB;AAEA,eAAeD,MAAM"}