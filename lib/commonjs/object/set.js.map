{"version":3,"names":["_isPlainObject","_interopRequireDefault","require","_each2","_isInteger","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","addEntry","value","numberAsArrayIndex","isInteger","range","RANGE_INDEX","Array","isArray","index","parseInt","length","numToFill","i","push","undefined","exports","_set","collection","keyPath","options","keyPathSeparator","isPlainObject","_each","v","k","nodes","concat","split","lastIndex","nested","next","nextKey","lastKey","_default"],"sources":["set.js"],"sourcesContent":["import isPlainObject from './isPlainObject';\nimport _each from 'lodash/each';\nimport isInteger, { RANGE_INDEX } from '../validators/isInteger';\n\n// attention: since mobx will wrap the object in a Proxy, the source value will be different from the wrapped one\n// Here must return the obj[index] of obj[key], otherwise the child node will not be mounted to the root object\n\nexport const addEntry = (obj, key, value, numberAsArrayIndex) => {\n    if (numberAsArrayIndex && isInteger(key, { range: RANGE_INDEX })) {\n        if (Array.isArray(obj)) {\n            const index = parseInt(key, 10);\n\n            if (obj.length <= index) {\n                const numToFill = index - obj.length;\n                if (numToFill > 0) {\n                    for (let i = 0; i < numToFill; i++) {\n                        obj.push(undefined);\n                    }\n                }\n\n                obj.push(value);\n            } else {\n                obj[index] = value;\n            }\n\n            return obj[index];\n        }\n    }\n\n    obj[key] = value;\n    return obj[key];\n};\n\n/**\n * Set a value by dot-separated path or key array into a collection\n * Does not support '[i]', e.g. 'a[0].b.c' style accessor, use [ 'a',  0, 'b', 'c' ] instead, different from lodash/set\n * @alias  object.set\n * @param {Object} collection - The collection\n * @param {string} keyPath - A dot-separated path (dsp) or a key array, e.g. settings.xxx.yyy, or ['setting', 'xxx', 'yyy']\n * @param {Object} value - The default value if the path does not exist\n * @returns {*}\n */\nconst _set = (collection, keyPath, value, options) => {\n    options = { numberAsArrayIndex: true, keyPathSeparator: '.', ...options };\n\n    if (collection == null || typeof collection !== 'object') {\n        return collection;\n    }\n\n    if (keyPath == null) {\n        return collection;\n    }\n\n    if (isPlainObject(keyPath) && typeof value === 'undefined') {\n        // extract all key value pair and set\n        _each(keyPath, (v, k) => _set(collection, k, v, options));\n        return collection;\n    }\n\n    // break the path into nodes array\n    let nodes = Array.isArray(keyPath) ? keyPath.concat() : keyPath.split(options.keyPathSeparator);\n    const length = nodes.length;\n\n    if (length > 0) {\n        const lastIndex = length - 1;\n\n        let index = 0;\n        let nested = collection;\n\n        while (nested != null && index < lastIndex) {\n            const key = nodes[index++];\n\n            let next = nested[key];\n            if (next == null || typeof next !== 'object') {\n                // peek next node, see if it is integer\n                const nextKey = nodes[index];\n\n                if (options.numberAsArrayIndex && isInteger(nextKey, { range: RANGE_INDEX })) {\n                    next = addEntry(nested, key, [], options.numberAsArrayIndex);\n                } else {\n                    next = addEntry(nested, key, {}, options.numberAsArrayIndex);\n                }\n            }\n\n            nested = next;\n        }\n\n        const lastKey = nodes[lastIndex];\n        addEntry(nested, lastKey, value, options.numberAsArrayIndex);\n    }\n\n    return collection;\n};\n\nexport default _set;\n"],"mappings":"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"}